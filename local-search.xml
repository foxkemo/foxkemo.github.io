<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Systemd 相关</title>
    <link href="/2025/04/05/Systemd%E6%9C%89%E5%85%B3/"/>
    <url>/2025/04/05/Systemd%E6%9C%89%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<p>好的！我们来把 Linux 中 <strong>systemd 服务的状态</strong> 讲得清清楚楚，包括它的几个主要 <strong>状态分类</strong>、每个字段的意义、常见的状态组合，并且带上<strong>图解风格思维导图式分类</strong>👇</p><hr><h2 id="🧱-一、服务状态的-3-个关键字段（在-systemctl-中）"><a href="#🧱-一、服务状态的-3-个关键字段（在-systemctl-中）" class="headerlink" title="🧱 一、服务状态的 3 个关键字段（在 systemctl 中）"></a>🧱 一、服务状态的 3 个关键字段（在 <code>systemctl</code> 中）</h2><table><thead><tr><th>字段</th><th>意义</th><th>举例</th></tr></thead><tbody><tr><td><strong>LOAD</strong></td><td>是否成功加载了 unit 文件</td><td><code>loaded</code> &#x2F; <code>not-found</code></td></tr><tr><td><strong>ACTIVE</strong></td><td>高层次的活跃状态（是否正在工作）</td><td><code>active</code> &#x2F; <code>inactive</code> &#x2F; <code>failed</code></td></tr><tr><td><strong>SUB</strong></td><td>具体的子状态，描述服务的运行细节</td><td><code>running</code> &#x2F; <code>exited</code> &#x2F; <code>dead</code></td></tr></tbody></table><hr><h2 id="🧩-二、服务状态分类（思维导图风格）"><a href="#🧩-二、服务状态分类（思维导图风格）" class="headerlink" title="🧩 二、服务状态分类（思维导图风格）"></a>🧩 二、服务状态分类（思维导图风格）</h2><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">服务状态 (<span class="hljs-string">systemctl</span> <span class="hljs-built_in">list-units)</span><br>├── <span class="hljs-string">LOAD</span><br>│   ├── <span class="hljs-string">loaded</span>         <span class="hljs-comment"># unit 文件已成功加载</span><br>│   ├── <span class="hljs-string">not-found</span>      <span class="hljs-comment"># unit 文件不存在</span><br>│   └── <span class="hljs-string">bad-setting</span>    <span class="hljs-comment"># 配置错误</span><br>│<br>├── <span class="hljs-string">ACTIVE</span><br>│   ├── <span class="hljs-string">active</span>         <span class="hljs-comment"># 服务正常运行中</span><br>│   ├── <span class="hljs-string">inactive</span>       <span class="hljs-comment"># 没有运行</span><br>│   ├── <span class="hljs-string">activating</span>     <span class="hljs-comment"># 正在启动中</span><br>│   ├── <span class="hljs-string">deactivating</span>   <span class="hljs-comment"># 正在关闭中</span><br>│   └── <span class="hljs-string">failed</span>         <span class="hljs-comment"># 启动失败</span><br>│<br>└── <span class="hljs-string">SUB</span><br>    ├── <span class="hljs-string">running</span>        <span class="hljs-comment"># 正常运行中（持续进程）</span><br>    ├── <span class="hljs-string">exited</span>         <span class="hljs-comment"># 启动后立即退出（短生命周期，如一次性脚本）</span><br>    ├── <span class="hljs-string">waiting</span>        <span class="hljs-comment"># 守护进程等待事件触发（常见于 socket 服务）</span><br>    ├── <span class="hljs-string">dead</span>           <span class="hljs-comment"># 没有活动进程</span><br>    └── <span class="hljs-string">auto-restart</span>   <span class="hljs-comment"># 正在尝试自动重启（Restart=always）</span><br></code></pre></td></tr></table></figure><hr><h2 id="🧠-三、常见状态组合（systemctl-list-units）"><a href="#🧠-三、常见状态组合（systemctl-list-units）" class="headerlink" title="🧠 三、常见状态组合（systemctl list-units）"></a>🧠 三、常见状态组合（<code>systemctl list-units</code>）</h2><table><thead><tr><th>LOAD</th><th>ACTIVE</th><th>SUB</th><th>说明</th></tr></thead><tbody><tr><td>loaded</td><td>active</td><td>running</td><td>✅ 正常运行中（如 ssh、nginx）</td></tr><tr><td>loaded</td><td>active</td><td>exited</td><td>✅ 运行后退出（如一次性任务）</td></tr><tr><td>loaded</td><td>inactive</td><td>dead</td><td>⚠️ 未启动服务但配置没问题</td></tr><tr><td>loaded</td><td>failed</td><td>failed</td><td>❌ 启动失败，可查日志</td></tr><tr><td>not-found</td><td>inactive</td><td>dead</td><td>❌ unit 文件都找不到</td></tr><tr><td>loaded</td><td>active</td><td>waiting</td><td>💤 守候中（如 socket 触发服务）</td></tr></tbody></table><hr><h2 id="🔧-四、如何排查异常状态"><a href="#🔧-四、如何排查异常状态" class="headerlink" title="🔧 四、如何排查异常状态"></a>🔧 四、如何排查异常状态</h2><table><thead><tr><th>状态</th><th>原因分析</th><th>排查方法</th></tr></thead><tbody><tr><td><code>failed</code></td><td>启动失败</td><td><code>journalctl -xe</code> 或 <code>systemctl status 服务名</code></td></tr><tr><td><code>exited</code></td><td>脚本类服务执行完退出（正常）</td><td>查看是否需要持久运行</td></tr><tr><td><code>inactive</code></td><td>没启动或被停止了</td><td><code>systemctl start 服务名</code> 启动它</td></tr><tr><td><code>masked</code></td><td>被管理员禁用启动了</td><td><code>sudo systemctl unmask 服务名</code> 解锁</td></tr></tbody></table><hr><h2 id="🎯-五、查看单个服务状态（命令）"><a href="#🎯-五、查看单个服务状态（命令）" class="headerlink" title="🎯 五、查看单个服务状态（命令）"></a>🎯 五、查看单个服务状态（命令）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status nginx<br></code></pre></td></tr></table></figure><p>输出包括：</p><ul><li>Loaded: 文件路径</li><li>Active: 状态 + 时间</li><li>Process: PID 等信息</li><li>日志片段（类似 tail）</li></ul><hr><h2 id="✅-例子讲解：systemctl-status-ssh"><a href="#✅-例子讲解：systemctl-status-ssh" class="headerlink" title="✅ 例子讲解：systemctl status ssh"></a>✅ 例子讲解：<code>systemctl status ssh</code></h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts">● ssh.service - OpenBSD Secure Shell server<br><span class="hljs-symbol">   Loaded:</span> loaded (<span class="hljs-keyword">/lib/</span>systemd<span class="hljs-keyword">/system/</span>ssh.<span class="hljs-attr">service</span><span class="hljs-punctuation">;</span> enabled)<br><span class="hljs-symbol">   Active:</span> active (running) since ...<br> Main PID: <span class="hljs-number">938</span><br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>Unit 文件成功加载（loaded）</li><li>当前正在运行（active）</li><li>是持续服务（sub: running）</li><li>设置了开机自启（enabled）</li></ul><hr><p>如果你发我一条你机器上 <code>systemctl status xxx</code> 的输出，我可以帮你读懂它的状态和建议怎么处理～是否要我也画张小图帮助你记忆这几个状态关系？</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql数据库基本操作</title>
    <link href="/2025/04/05/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/2025/04/05/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql入门</title>
    <link href="/2025/04/05/Mysql%E5%85%A5%E9%97%A8/"/>
    <url>/2025/04/05/Mysql%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础知识</title>
    <link href="/2025/04/05/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2025/04/05/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs"> `Object` 类是 Java 中所有类的祖宗类，所有类默认都继承它。它定义了一组最基础、最通用的方法，**每个 Java 对象都可以使用这些方法**。</code></pre><hr><h1 id="Object-method"><a href="#Object-method" class="headerlink" title="Object method"></a>Object method</h1><h2 id="🧬-Object-类的所有方法一览"><a href="#🧬-Object-类的所有方法一览" class="headerlink" title="🧬 Object 类的所有方法一览"></a>🧬 Object 类的所有方法一览</h2><table><thead><tr><th>方法名</th><th>作用简述</th></tr></thead><tbody><tr><td><code>clone()</code></td><td>创建并返回对象的副本（浅拷贝）</td></tr><tr><td><code>equals(Object obj)</code></td><td>比较两个对象是否“逻辑相等”</td></tr><tr><td><code>finalize()</code></td><td>垃圾回收前调用的方法（已过时）</td></tr><tr><td><code>getClass()</code></td><td>获取对象的运行时类（返回 Class 对象）</td></tr><tr><td><code>hashCode()</code></td><td>返回对象的哈希码（用于哈希结构）</td></tr><tr><td><code>toString()</code></td><td>返回对象的字符串表示</td></tr><tr><td><code>notify()</code></td><td>唤醒一个正在等待该对象的线程（多线程同步）</td></tr><tr><td><code>notifyAll()</code></td><td>唤醒所有等待该对象的线程</td></tr><tr><td><code>wait()</code></td><td>当前线程等待，直到被唤醒（配合 synchronized 使用）</td></tr><tr><td><code>wait(long timeout)</code></td><td>等待指定毫秒后自动唤醒</td></tr><tr><td><code>wait(long timeout, int nanos)</code></td><td>更精细的等待</td></tr></tbody></table><hr><h2 id="🔍-方法说明（常用的）"><a href="#🔍-方法说明（常用的）" class="headerlink" title="🔍 方法说明（常用的）"></a>🔍 方法说明（常用的）</h2><h3 id="1-equals-Object-obj"><a href="#1-equals-Object-obj" class="headerlink" title="1. equals(Object obj)"></a>1. <code>equals(Object obj)</code></h3><p>默认比较地址，可以重写实现内容比较（如 <code>String.equals()</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span> || getClass() != obj.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Person) obj;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age == p.age &amp;&amp; <span class="hljs-built_in">this</span>.name.equals(p.name);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="2-hashCode"><a href="#2-hashCode" class="headerlink" title="2. hashCode()"></a>2. <code>hashCode()</code></h3><p>用于哈希结构，如 <code>HashMap</code>，必须和 <code>equals()</code> 一起重写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Objects.hash(name, age);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="3-toString"><a href="#3-toString" class="headerlink" title="3. toString()"></a>3. <code>toString()</code></h3><p>默认输出格式是：类名@哈希码，可以重写更友好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;name=&#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27;, age=&quot;</span> + age + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="4-clone"><a href="#4-clone" class="headerlink" title="4. clone()"></a>4. <code>clone()</code></h3><p>用来复制对象，<strong>要实现 <code>Cloneable</code> 接口</strong>，否则会抛异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> (Person) <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="5-getClass"><a href="#5-getClass" class="headerlink" title="5. getClass()"></a>5. <code>getClass()</code></h3><p>返回对象的类信息（反射相关）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>System.out.println(p.getClass().getName()); <span class="hljs-comment">// 输出: Person</span><br></code></pre></td></tr></table></figure><hr><h3 id="6-wait-notify-notifyAll"><a href="#6-wait-notify-notifyAll" class="headerlink" title="6. wait() &#x2F; notify() &#x2F; notifyAll()"></a>6. <code>wait()</code> &#x2F; <code>notify()</code> &#x2F; <code>notifyAll()</code></h3><p>这些是线程通信相关方法，必须在 <code>synchronized</code> 块中使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(obj) &#123;<br>    obj.wait();      <span class="hljs-comment">// 当前线程等待</span><br>    obj.notify();    <span class="hljs-comment">// 唤醒等待中的线程</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="🧠-总结分类"><a href="#🧠-总结分类" class="headerlink" title="🧠 总结分类"></a>🧠 总结分类</h2><table><thead><tr><th>类型</th><th>方法</th></tr></thead><tbody><tr><td>对象比较与表示</td><td><code>equals()</code>、<code>hashCode()</code>、<code>toString()</code></td></tr><tr><td>克隆</td><td><code>clone()</code></td></tr><tr><td>获取类信息</td><td><code>getClass()</code></td></tr><tr><td>多线程通信</td><td><code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code></td></tr><tr><td>生命周期（过时）</td><td><code>finalize()</code></td></tr></tbody></table><hr><p>如果你想看看某个方法的源码、应用场景，或者需要我举具体例子，我可以给你细讲~</p><p>Java 集合（Collection）框架提供了大量的方法，用于操作各种集合类型，如 <code>List</code>、<code>Set</code>、<code>Map</code> 等。下面是一些常用集合接口和它们的方法简要整理：</p><hr><h1 id="集合类-有关-函数"><a href="#集合类-有关-函数" class="headerlink" title="集合类 有关 函数"></a>集合类 有关 函数</h1><h2 id="🧺-一、Collection-接口（List、Set-的父接口）"><a href="#🧺-一、Collection-接口（List、Set-的父接口）" class="headerlink" title="🧺 一、Collection 接口（List、Set 的父接口）"></a>🧺 一、Collection 接口（List、Set 的父接口）</h2><p>常用方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>add(E e)</code></td><td>添加元素</td></tr><tr><td><code>addAll(Collection&lt;? extends E&gt; c)</code></td><td>添加另一个集合中的全部元素</td></tr><tr><td><code>remove(Object o)</code></td><td>移除指定元素</td></tr><tr><td><code>removeAll(Collection&lt;?&gt; c)</code></td><td>移除集合中所有与参数集合相同的元素</td></tr><tr><td><code>retainAll(Collection&lt;?&gt; c)</code></td><td>只保留集合中和参数集合相同的元素</td></tr><tr><td><code>clear()</code></td><td>清空集合</td></tr><tr><td><code>contains(Object o)</code></td><td>是否包含指定元素</td></tr><tr><td><code>containsAll(Collection&lt;?&gt; c)</code></td><td>是否包含指定集合中的所有元素</td></tr><tr><td><code>isEmpty()</code></td><td>是否为空</td></tr><tr><td><code>size()</code></td><td>返回元素个数</td></tr><tr><td><code>iterator()</code></td><td>返回迭代器</td></tr></tbody></table><hr><h2 id="📃-二、List-接口（ArrayList、LinkedList-等）"><a href="#📃-二、List-接口（ArrayList、LinkedList-等）" class="headerlink" title="📃 二、List 接口（ArrayList、LinkedList 等）"></a>📃 二、List 接口（ArrayList、LinkedList 等）</h2><p>继承自 Collection，支持索引操作：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>get(int index)</code></td><td>获取指定索引的元素</td></tr><tr><td><code>set(int index, E element)</code></td><td>替换指定索引处的元素</td></tr><tr><td><code>add(int index, E element)</code></td><td>在指定位置插入元素</td></tr><tr><td><code>remove(int index)</code></td><td>移除指定索引处的元素</td></tr><tr><td><code>indexOf(Object o)</code></td><td>返回首次出现的位置</td></tr><tr><td><code>lastIndexOf(Object o)</code></td><td>返回最后一次出现的位置</td></tr><tr><td><code>subList(int fromIndex, int toIndex)</code></td><td>获取子列表</td></tr></tbody></table><hr><h2 id="🔁-三、Set-接口（HashSet、TreeSet、LinkedHashSet）"><a href="#🔁-三、Set-接口（HashSet、TreeSet、LinkedHashSet）" class="headerlink" title="🔁 三、Set 接口（HashSet、TreeSet、LinkedHashSet）"></a>🔁 三、Set 接口（HashSet、TreeSet、LinkedHashSet）</h2><p>继承自 Collection，<strong>不允许重复元素</strong>。</p><p>常用方法基本与 Collection 相同，但不支持索引访问（如 <code>get()</code>）。</p><hr><h2 id="📒-四、Map-接口（HashMap、TreeMap、LinkedHashMap）"><a href="#📒-四、Map-接口（HashMap、TreeMap、LinkedHashMap）" class="headerlink" title="📒 四、Map 接口（HashMap、TreeMap、LinkedHashMap）"></a>📒 四、Map 接口（HashMap、TreeMap、LinkedHashMap）</h2><p>键值对存储（Key-Value）：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>put(K key, V value)</code></td><td>添加或更新键值对</td></tr><tr><td><code>putAll(Map&lt;? extends K, ? extends V&gt; m)</code></td><td>添加另一个 Map 中的所有键值对</td></tr><tr><td><code>get(Object key)</code></td><td>获取指定 key 的值</td></tr><tr><td><code>remove(Object key)</code></td><td>移除指定 key 的键值对</td></tr><tr><td><code>containsKey(Object key)</code></td><td>是否包含指定 key</td></tr><tr><td><code>containsValue(Object value)</code></td><td>是否包含指定 value</td></tr><tr><td><code>keySet()</code></td><td>返回所有 key 的 Set</td></tr><tr><td><code>values()</code></td><td>返回所有 value 的 Collection</td></tr><tr><td><code>entrySet()</code></td><td>返回所有键值对的 Set&lt;Map.Entry&lt;K,V&gt;&gt;</td></tr><tr><td><code>size()</code></td><td>返回键值对个数</td></tr><tr><td><code>clear()</code></td><td>清空 map</td></tr><tr><td><code>isEmpty()</code></td><td>是否为空</td></tr></tbody></table><hr><p>如果你有具体哪种集合、哪类方法（比如：排序、查找、遍历）想详细了解，我可以更深入整理！也可以结合代码例子来讲讲。你想重点学哪个部分？</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux入门</title>
    <link href="/2025/04/05/Linux%E5%85%A5%E9%97%A8/"/>
    <url>/2025/04/05/Linux%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-使用小技巧"><a href="#Linux-使用小技巧" class="headerlink" title="Linux 使用小技巧"></a>Linux 使用小技巧</h1><h3 id="vim详细入门"><a href="#vim详细入门" class="headerlink" title="vim详细入门"></a><a href="https://www.runoob.com/w3cnote/all-vim-cheatsheat.html">vim详细入门</a></h3><p><img src="/images/01.gif" alt="vim键盘图"></p><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/d0c50-linux2bfile2bsystem2bhierarchy.jpg" alt="文件结构示意图"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
