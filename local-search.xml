<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>有趣的问题</title>
    <link href="/2025/04/05/%E6%9C%89%E8%B6%A3%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2025/04/05/%E6%9C%89%E8%B6%A3%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="java-多线程synchronized-锁住的到底是什么？"><a href="#java-多线程synchronized-锁住的到底是什么？" class="headerlink" title="java 多线程synchronized 锁住的到底是什么？"></a>java 多线程synchronized 锁住的到底是什么？</h1><h2 id="分为静态方法和非静态方法"><a href="#分为静态方法和非静态方法" class="headerlink" title="分为静态方法和非静态方法"></a>分为静态方法和非静态方法</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql数据库基本操作</title>
    <link href="/2025/04/05/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/2025/04/05/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql入门</title>
    <link href="/2025/04/05/Mysql%E5%85%A5%E9%97%A8/"/>
    <url>/2025/04/05/Mysql%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础知识</title>
    <link href="/2025/04/05/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2025/04/05/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs"> `Object` 类是 Java 中所有类的祖宗类，所有类默认都继承它。它定义了一组最基础、最通用的方法，**每个 Java 对象都可以使用这些方法**。</code></pre><hr><h2 id="🧬-Object-类的所有方法一览"><a href="#🧬-Object-类的所有方法一览" class="headerlink" title="🧬 Object 类的所有方法一览"></a>🧬 Object 类的所有方法一览</h2><table><thead><tr><th>方法名</th><th>作用简述</th></tr></thead><tbody><tr><td><code>clone()</code></td><td>创建并返回对象的副本（浅拷贝）</td></tr><tr><td><code>equals(Object obj)</code></td><td>比较两个对象是否“逻辑相等”</td></tr><tr><td><code>finalize()</code></td><td>垃圾回收前调用的方法（已过时）</td></tr><tr><td><code>getClass()</code></td><td>获取对象的运行时类（返回 Class 对象）</td></tr><tr><td><code>hashCode()</code></td><td>返回对象的哈希码（用于哈希结构）</td></tr><tr><td><code>toString()</code></td><td>返回对象的字符串表示</td></tr><tr><td><code>notify()</code></td><td>唤醒一个正在等待该对象的线程（多线程同步）</td></tr><tr><td><code>notifyAll()</code></td><td>唤醒所有等待该对象的线程</td></tr><tr><td><code>wait()</code></td><td>当前线程等待，直到被唤醒（配合 synchronized 使用）</td></tr><tr><td><code>wait(long timeout)</code></td><td>等待指定毫秒后自动唤醒</td></tr><tr><td><code>wait(long timeout, int nanos)</code></td><td>更精细的等待</td></tr></tbody></table><hr><h2 id="🔍-方法说明（常用的）"><a href="#🔍-方法说明（常用的）" class="headerlink" title="🔍 方法说明（常用的）"></a>🔍 方法说明（常用的）</h2><h3 id="1-equals-Object-obj"><a href="#1-equals-Object-obj" class="headerlink" title="1. equals(Object obj)"></a>1. <code>equals(Object obj)</code></h3><p>默认比较地址，可以重写实现内容比较（如 <code>String.equals()</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span> || getClass() != obj.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Person) obj;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age == p.age &amp;&amp; <span class="hljs-built_in">this</span>.name.equals(p.name);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="2-hashCode"><a href="#2-hashCode" class="headerlink" title="2. hashCode()"></a>2. <code>hashCode()</code></h3><p>用于哈希结构，如 <code>HashMap</code>，必须和 <code>equals()</code> 一起重写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Objects.hash(name, age);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="3-toString"><a href="#3-toString" class="headerlink" title="3. toString()"></a>3. <code>toString()</code></h3><p>默认输出格式是：类名@哈希码，可以重写更友好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;name=&#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27;, age=&quot;</span> + age + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="4-clone"><a href="#4-clone" class="headerlink" title="4. clone()"></a>4. <code>clone()</code></h3><p>用来复制对象，<strong>要实现 <code>Cloneable</code> 接口</strong>，否则会抛异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> (Person) <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="5-getClass"><a href="#5-getClass" class="headerlink" title="5. getClass()"></a>5. <code>getClass()</code></h3><p>返回对象的类信息（反射相关）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>System.out.println(p.getClass().getName()); <span class="hljs-comment">// 输出: Person</span><br></code></pre></td></tr></table></figure><hr><h3 id="6-wait-notify-notifyAll"><a href="#6-wait-notify-notifyAll" class="headerlink" title="6. wait() &#x2F; notify() &#x2F; notifyAll()"></a>6. <code>wait()</code> &#x2F; <code>notify()</code> &#x2F; <code>notifyAll()</code></h3><p>这些是线程通信相关方法，必须在 <code>synchronized</code> 块中使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(obj) &#123;<br>    obj.wait();      <span class="hljs-comment">// 当前线程等待</span><br>    obj.notify();    <span class="hljs-comment">// 唤醒等待中的线程</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="🧠-总结分类"><a href="#🧠-总结分类" class="headerlink" title="🧠 总结分类"></a>🧠 总结分类</h2><table><thead><tr><th>类型</th><th>方法</th></tr></thead><tbody><tr><td>对象比较与表示</td><td><code>equals()</code>、<code>hashCode()</code>、<code>toString()</code></td></tr><tr><td>克隆</td><td><code>clone()</code></td></tr><tr><td>获取类信息</td><td><code>getClass()</code></td></tr><tr><td>多线程通信</td><td><code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code></td></tr><tr><td>生命周期（过时）</td><td><code>finalize()</code></td></tr></tbody></table><hr><p>如果你想看看某个方法的源码、应用场景，或者需要我举具体例子，我可以给你细讲~</p><p>Java 集合（Collection）框架提供了大量的方法，用于操作各种集合类型，如 <code>List</code>、<code>Set</code>、<code>Map</code> 等。下面是一些常用集合接口和它们的方法简要整理：</p><hr><h2 id="🧺-一、Collection-接口（List、Set-的父接口）"><a href="#🧺-一、Collection-接口（List、Set-的父接口）" class="headerlink" title="🧺 一、Collection 接口（List、Set 的父接口）"></a>🧺 一、Collection 接口（List、Set 的父接口）</h2><p>常用方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>add(E e)</code></td><td>添加元素</td></tr><tr><td><code>addAll(Collection&lt;? extends E&gt; c)</code></td><td>添加另一个集合中的全部元素</td></tr><tr><td><code>remove(Object o)</code></td><td>移除指定元素</td></tr><tr><td><code>removeAll(Collection&lt;?&gt; c)</code></td><td>移除集合中所有与参数集合相同的元素</td></tr><tr><td><code>retainAll(Collection&lt;?&gt; c)</code></td><td>只保留集合中和参数集合相同的元素</td></tr><tr><td><code>clear()</code></td><td>清空集合</td></tr><tr><td><code>contains(Object o)</code></td><td>是否包含指定元素</td></tr><tr><td><code>containsAll(Collection&lt;?&gt; c)</code></td><td>是否包含指定集合中的所有元素</td></tr><tr><td><code>isEmpty()</code></td><td>是否为空</td></tr><tr><td><code>size()</code></td><td>返回元素个数</td></tr><tr><td><code>iterator()</code></td><td>返回迭代器</td></tr></tbody></table><hr><h2 id="📃-二、List-接口（ArrayList、LinkedList-等）"><a href="#📃-二、List-接口（ArrayList、LinkedList-等）" class="headerlink" title="📃 二、List 接口（ArrayList、LinkedList 等）"></a>📃 二、List 接口（ArrayList、LinkedList 等）</h2><p>继承自 Collection，支持索引操作：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>get(int index)</code></td><td>获取指定索引的元素</td></tr><tr><td><code>set(int index, E element)</code></td><td>替换指定索引处的元素</td></tr><tr><td><code>add(int index, E element)</code></td><td>在指定位置插入元素</td></tr><tr><td><code>remove(int index)</code></td><td>移除指定索引处的元素</td></tr><tr><td><code>indexOf(Object o)</code></td><td>返回首次出现的位置</td></tr><tr><td><code>lastIndexOf(Object o)</code></td><td>返回最后一次出现的位置</td></tr><tr><td><code>subList(int fromIndex, int toIndex)</code></td><td>获取子列表</td></tr></tbody></table><hr><h2 id="🔁-三、Set-接口（HashSet、TreeSet、LinkedHashSet）"><a href="#🔁-三、Set-接口（HashSet、TreeSet、LinkedHashSet）" class="headerlink" title="🔁 三、Set 接口（HashSet、TreeSet、LinkedHashSet）"></a>🔁 三、Set 接口（HashSet、TreeSet、LinkedHashSet）</h2><p>继承自 Collection，<strong>不允许重复元素</strong>。</p><p>常用方法基本与 Collection 相同，但不支持索引访问（如 <code>get()</code>）。</p><hr><h2 id="📒-四、Map-接口（HashMap、TreeMap、LinkedHashMap）"><a href="#📒-四、Map-接口（HashMap、TreeMap、LinkedHashMap）" class="headerlink" title="📒 四、Map 接口（HashMap、TreeMap、LinkedHashMap）"></a>📒 四、Map 接口（HashMap、TreeMap、LinkedHashMap）</h2><p>键值对存储（Key-Value）：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>put(K key, V value)</code></td><td>添加或更新键值对</td></tr><tr><td><code>putAll(Map&lt;? extends K, ? extends V&gt; m)</code></td><td>添加另一个 Map 中的所有键值对</td></tr><tr><td><code>get(Object key)</code></td><td>获取指定 key 的值</td></tr><tr><td><code>remove(Object key)</code></td><td>移除指定 key 的键值对</td></tr><tr><td><code>containsKey(Object key)</code></td><td>是否包含指定 key</td></tr><tr><td><code>containsValue(Object value)</code></td><td>是否包含指定 value</td></tr><tr><td><code>keySet()</code></td><td>返回所有 key 的 Set</td></tr><tr><td><code>values()</code></td><td>返回所有 value 的 Collection</td></tr><tr><td><code>entrySet()</code></td><td>返回所有键值对的 Set&lt;Map.Entry&lt;K,V&gt;&gt;</td></tr><tr><td><code>size()</code></td><td>返回键值对个数</td></tr><tr><td><code>clear()</code></td><td>清空 map</td></tr><tr><td><code>isEmpty()</code></td><td>是否为空</td></tr></tbody></table><hr><p>如果你有具体哪种集合、哪类方法（比如：排序、查找、遍历）想详细了解，我可以更深入整理！也可以结合代码例子来讲讲。你想重点学哪个部分？</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux入门</title>
    <link href="/2025/04/05/Linux%E5%85%A5%E9%97%A8/"/>
    <url>/2025/04/05/Linux%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-使用小技巧"><a href="#Linux-使用小技巧" class="headerlink" title="Linux 使用小技巧"></a>Linux 使用小技巧</h1><h3 id="vim详细入门"><a href="#vim详细入门" class="headerlink" title="vim详细入门"></a><a href="https://www.runoob.com/w3cnote/all-vim-cheatsheat.html">vim详细入门</a></h3><p><img src="/images/01.gif" alt="vim键盘图"></p><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/d0c50-linux2bfile2bsystem2bhierarchy.jpg" alt="文件结构示意图"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/25/hello-world/"/>
    <url>/2025/03/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
